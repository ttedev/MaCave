name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod
    env:
      BACKEND_DIR: vin-back
      FRONTEND_DIR: app-react
      STATIC_DIR: vin-back/src/main/resources/static
      JAR_NAME: vin-back-0.0.1-SNAPSHOT.jar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      - name: Prepare static directory for backend packaging
        run: |
          rm -rf $STATIC_DIR/*
          cp -R $FRONTEND_DIR/dist/* $STATIC_DIR/
          ls -la $STATIC_DIR

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build backend (skip tests)
        working-directory: ${{ env.BACKEND_DIR }}
        run: mvn -B -DskipTests package

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: ${{ env.BACKEND_DIR }}/target/${{ env.JAR_NAME }}

      - name: Deploy JAR via SCP
        if: success()
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: ${{ env.BACKEND_DIR }}/target/${{ env.JAR_NAME }}
          target: ${{ secrets.DEPLOY_PATH }}
          overwrite: true

      - name: (Optional) Restart remote service
        if: success() && env.REMOTE_RESTART_CMD != ''
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.COMMAND_PATH }}
            echo "Restarting service..."
            ${{ secrets.REMOTE_RESTART_CMD }}
